import os
import sys
import asyncio
import logging

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ –∏–º–ø–æ—Ä—Ç–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
import django
django.setup()

from decouple import config
from PIL import Image
import json
import threading



from pathlib import Path
from aiogram.types import InputFile
from decimal import Decimal
from apps.order.models import Cart
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.utils.markdown import bold
from asgiref.sync import sync_to_async
from django.contrib.auth.hashers import make_password, check_password
from django.contrib.auth.models import User
from apps.order.models import Order

API_TOKEN = config('API_TOKEN')
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
existing_orders_markup = None 

class RegisterState(StatesGroup):
    say_username = State()
    say_password = State()
    say_tg_username = State()


@dp.message(Command("start"))
async def username(message: types.Message, state: FSMContext):
    await message.answer("—Ü–µ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç –¥–ª—è –ø–∞–π—Ç–æ–Ω —Å–∞–π—Ç–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å - /login —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è, /logout —â–æ–± –≤–∏–π—Ç–∏ –∑ –∞–∫–∫–∞—É–Ω—Ç—É, /orders —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, /cart —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ç–æ–≤–∞—Ä–∏ –≤–∫–æ—Ä–∑–∏–Ω—ñ")



@dp.message(Command("login"))
async def username(message: types.Message, state: FSMContext):
    await state.set_state(RegisterState.say_username)
    await message.answer("–Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à —é–∑–µ—Ä–Ω–µ–π–º –Ω–∞ —Å–∞–π—Ç—ñ")
    
    
    
@dp.message(RegisterState.say_username)
async def password(message: types.Message, state: FSMContext):
    try:
        say_username = str(message.text)
        await state.update_data(say_username = say_username)
        print(say_username)
        await state.set_state(RegisterState.say_password)
        await message.answer("–Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å")
    except:
        await message.answer("—Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")
    
    
@dp.message(RegisterState.say_password)
async def login(message: types.Message, state: FSMContext):
    say_password = str(message.text)
    data = await state.get_data()
    say_username = data.get('say_username')
    

    queryset = await sync_to_async(User.objects.filter)(username=say_username)
    user = await sync_to_async(queryset.first)()
    

    if not user or not check_password(say_password, user.password):
        await message.answer("—Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return

    user_data = {
        'id': message.from_user.username,
        'database_username': user.username,
        'password': make_password(say_password),
        'user_is_logging': True
    }

    users = await read_users_from_file()
    
    existing_user = next((u for u in users if u.get('database_username') == user.username), None)
    if existing_user and existing_user.get('id') == message.from_user.username:
        await message.answer("—Ç–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    for uniq in users:
        if uniq["id"] == message.from_user.username:
            await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ –≤–∂–µ —ñ—Å–Ω—É—î, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–π—Ç–∏ –∑ –∞–∫–∫–∞—É–Ω—Ç—É —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —ñ–Ω—à–∏–π")
            await state.clear()
            return

        
    users.append(user_data)

    with open('users.json', 'w') as f:
        json.dump(users, f, indent=4)

    await message.answer(f"–≤–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏ —è–∫ {user.username}, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /orders, —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∞–±–æ /cart –¥–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É")
    await state.clear()


async def read_users_from_file():
    try:
        with open('users.json', 'r') as f:
            users_info = json.load(f)
            return users_info
        
    except FileNotFoundError:
        return []
  
   
@dp.message(Command("logout"))
async def delete_user_from_file(message: types.Message) -> None:
    try:
        
        users_info = await read_users_from_file()

        updated_users = [user for user in users_info if user['id'] != message.from_user.username]


        with open('users.json', 'w') as f:
            json.dump(updated_users, f, indent=4)
        await message.answer("–≤–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ –∞–∫–∫–∞—É–Ω—Ç—É")
        
    except FileNotFoundError:
        print("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")



async def check_user(id):
    users_info = await read_users_from_file()
    for user in users_info:
        if user["id"] == id:
            return user

def fetch_orders(data_us):
    orders = Order.objects.filter(user__username=data_us)
    orders_info_list = []
    for order in reversed(orders):
        order_info = f"–ó–∞–∫–∞–∑ {order.id}:\n" \
                     f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created_at}\n" \
                     f"–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {order.updated_at}\n" \
                     f"–û–±—â–∞—è —Ü–µ–Ω–∞: {order.total_price}\n" \
                     f"–°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n\n"
        orders_info_list.append(order_info)
    return orders_info_list



# def send_telegram_notification(old_status, new_status, username):
#     status = f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω—ë–Ω: {old_status} -> {new_status}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}"
#     print(status)
#     await swnd_status(message, status)  # Pass both message and status
#     return status
    
# @dp.message()
# async def swnd_status(message: types.Message, status):  # Add the message argument
#     await message.answer(status)

    
    
    
    
mainmenu = InlineKeyboardBuilder()
mainmenu.row(types.InlineKeyboardButton(text="–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="us_orders"))
         
        
def gen_button_orders_list(num_order, orders):
    markup = InlineKeyboardBuilder()
    length_orders = len(orders)
    if num_order == 0:
        markup.row(
            types.InlineKeyboardButton(text="‚è≠Ô∏è–ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data=f"orders_list_{num_order+1}")
        )
    elif num_order == length_orders - 1:
        markup.row(
            types.InlineKeyboardButton(text="‚èÆÔ∏è–ù–∞–∑–∞–¥", callback_data=f"orders_list_{num_order-1}"),
            types.InlineKeyboardButton(text=f"{num_order+1}/{length_orders}", callback_data="none"),
            types.InlineKeyboardButton(text="üîö–ö—ñ–Ω–µ—Ü—å", callback_data=f"orders_list_0")
        )
    else:
        markup.row(
            types.InlineKeyboardButton(text="‚èÆÔ∏è–ù–∞–∑–∞–¥", callback_data=f"orders_list_{num_order-1}"),
            types.InlineKeyboardButton(text=f"{num_order+1}/{length_orders}", callback_data="none"),
            types.InlineKeyboardButton(text="‚è≠Ô∏è–ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data=f"orders_list_{num_order+1}")
        )
    return markup


@dp.message(Command('orders'))
async def get_user_orders(message: types.Message, state: FSMContext):
    try:
        user = await check_user(message.from_user.username)
        data_us = user["database_username"]
        
        orders_info_list = await sync_to_async(fetch_orders)(data_us)
        if not orders_info_list:
            await message.answer("–í –≤–∞—Å –Ω–µ–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å")
            return
        elif len(orders_info_list) <= 3:
            await message.answer("\n\n".join(orders_info_list))
            return

        current_order_index = 0
        current_order_info = orders_info_list[current_order_index]

        markup = gen_button_orders_list(current_order_index, orders_info_list)
        await message.answer(current_order_info, reply_markup=markup.as_markup())

        await state.update_data(orders_info_list=orders_info_list, current_order_index=current_order_index)

    except Exception as e:
        await message.answer("—Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞")
        print(f"–ø–æ–º–∏–ª–∫–∞: {e}")


@dp.callback_query(F.data.startswith("orders_list_"))
async def next_order(call: types.CallbackQuery, state: FSMContext):
    call.message.delete_reply_markup()
    user = await check_user(call.from_user.username)
    data_us = user["database_username"]
    orders_info_list = await sync_to_async(fetch_orders)(data_us)
    
    num_order = int(call.data.split("_")[-1])
    try:
        order_info = orders_info_list[num_order]
    except IndexError:
        call.message.answer("–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ —ñ—Å–Ω—É—î")
        try:
            await call.message.delete()
        except:
            pass

    markup = gen_button_orders_list(num_order, orders_info_list)
    await call.message.answer(order_info, reply_markup=markup.as_markup())

    try:
        await call.message.delete()
    except:
        pass
    
    
    



cart = InlineKeyboardBuilder()
cart.row(types.InlineKeyboardButton(text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞", callback_data="us_cart"))



def fetch_cart_info(data_us):
    try:
        user_cart = Cart.objects.filter(user__username=data_us)

        if not user_cart:
            return {"cart_info": ["–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."], "image_urls": []}

        cart_info = []
        image_urls = []
        total_price = 0

        for index, cart_item in enumerate(user_cart, start=1):
            product = cart_item.product
            quantity = cart_item.quantity
            price = product.price
            total_item_price = quantity * price

            main_image = product.main_image()

            if main_image:
                image_url = main_image.image.url
                image_urls.append(image_url)
            else:
                image_url = ""

            cart_info.append(
                f"{index}. {product.name}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
                f"–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {price}\n"
                f"–û–±—â–∞—è —Ü–µ–Ω–∞: {total_item_price}\n"
            )

            total_price += total_item_price

        cart_info.append(f"–í—Å–µ–≥–æ: {total_price}\n–° —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –≤ 5%: {total_price * Decimal('0.95')}")

        context = {
            "cart_info": cart_info,
            "image_urls": image_urls
        }
        return context

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–∑–∏–Ω–µ: {e}")
        return {"cart_info": ["–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–∑–∏–Ω–µ."], "image_urls": []}







def gen_button_cart_list(num_cart, cart):
    markup = InlineKeyboardBuilder()
    length_cart = len(cart)
    if num_cart == 0:
        markup.row(
            types.InlineKeyboardButton(text="‚è≠Ô∏è–ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data=f"cart_list_{num_cart + 1}")
        )
    elif num_cart == length_cart - 1:
        markup.row(
            types.InlineKeyboardButton(text="‚èÆÔ∏è–ù–∞–∑–∞–¥", callback_data=f"cart_list_{num_cart - 1}"),
            types.InlineKeyboardButton(text=f"{num_cart + 1}/{length_cart}", callback_data="none"),
            types.InlineKeyboardButton(text="üîö–ö—ñ–Ω–µ—Ü—å", callback_data=f"cart_list_0")
        )
    else:
        markup.row(
            types.InlineKeyboardButton(text="‚èÆÔ∏è–ù–∞–∑–∞–¥", callback_data=f"cart_list_{num_cart - 1}"),
            types.InlineKeyboardButton(text=f"{num_cart + 1}/{length_cart}", callback_data="none"),
            types.InlineKeyboardButton(text="‚è≠Ô∏è–ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data=f"cart_list_{num_cart + 1}")
        )
    return markup
    
    
    


@dp.message(Command('cart'))
async def get_user_cart(message: types.Message, state: FSMContext):
    try:
        user = await check_user(message.from_user.username)
        data_us = user["database_username"]
        
        cart_info_listt = await sync_to_async(fetch_cart_info)(data_us)
        cart_info_list = cart_info_listt["cart_info"]
        image_urls = cart_info_listt["image_urls"]
        
        if not cart_info_list:
            await message.answer("–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.")
            return
        elif len(cart_info_list) <= 3:
            await message.answer("\n\n".join(cart_info_list))
            return

        current_cart_index = 0
        current_cart_info = cart_info_list[current_cart_index]
        current_cart_photo = image_urls[current_cart_index]

        markup = gen_button_cart_list(current_cart_index, current_cart_info)
        photo_path = Path(current_cart_photo.lstrip('/'))
        photo = types.FSInputFile(str(photo_path))
        await message.answer_photo(photo, caption=current_cart_info, reply_markup=markup.as_markup())

        await state.update_data(cart_info_list=cart_info_list, current_cart_index=current_cart_index)

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")


    
    
    



@dp.callback_query(F.data.startswith("cart_list_"))
async def next_cart(call: types.CallbackQuery, state: FSMContext):
    call.message.delete_reply_markup()
    user = await check_user(call.from_user.username)
    data_us = user["database_username"]
    cart_info_listt = await sync_to_async(fetch_cart_info)(data_us)
    cart_info_list = cart_info_listt["cart_info"]
    num_cart = int(call.data.split("_")[-1])
    
    if num_cart < len(cart_info_list) - 1:
        image_urls = cart_info_listt["image_urls"]
        photo = image_urls[num_cart]
        try:
            cart_info = cart_info_list[num_cart]
        except IndexError:
            call.message.answer("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–µ —ñ—Å–Ω—É—î")
            try:
                await call.message.delete()
            except:
                pass

        markup = gen_button_cart_list(num_cart, cart_info_list)
        photo_path = Path(photo.lstrip('/'))
        print(photo_path)
        photo = types.FSInputFile(str(photo_path))
        print(photo)
        await call.message.answer_photo(photo, caption=cart_info, reply_markup=markup.as_markup())
    else:
        cart_info = cart_info_list[-1]  
        markup = gen_button_cart_list(num_cart, cart_info_list)
        await call.message.answer(cart_info, reply_markup=markup.as_markup())

    try:
        await call.message.delete()
    except:
        pass







        
        
async def main() -> None:
    bot = Bot(API_TOKEN, parse_mode=ParseMode.HTML)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())